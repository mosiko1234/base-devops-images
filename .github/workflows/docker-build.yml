name: Build Docker Images

on:
  push:
    branches:
      - new_images

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Python dependencies
        run: pip install pyyaml  # ייתכן שיידרש

      - name: Generate Matrix
        id: set-matrix
        run: |
          python .github/scripts/generate_matrix.py > matrix.json
          cat matrix.json  # הדפסת המטריצה לאימות
          echo "matrix=$(jq -c . < matrix.json)" >> $GITHUB_OUTPUT

  build-matrix:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Generate Dockerfile from Template
        run: |
          cat Dockerfile.template | sed "s|{{BASE_IMAGE}}|${{ matrix.base_image }}|g" | sed "s|{{PACKAGES}}|${{ matrix.packages }}|g" > Dockerfile
          cat Dockerfile  # הדפסה לבדיקה

      - name: Set Image Tag
        run: |
          DOCKER_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.language }}:${{ matrix.version }}"
          echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          echo "Building Image: $DOCKER_TAG"
          docker build -t "$DOCKER_TAG" .

      - name: Verify Image Exists Locally
        run: |
          echo "Verifying image existence: $DOCKER_TAG"
          docker images | grep "$DOCKER_TAG" || (echo "Image build failed!" && exit 1)

      - name: Push Docker Image
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push "$DOCKER_TAG"
