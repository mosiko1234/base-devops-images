name: Build and Push Docker Images

on:
  push:
    branches:
      - main

jobs:
  # Job 1: Build Base Image
  build-base-image:
    name: Build and Push Base Image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to DockerHub
      run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

#    - name: Lint Base Dockerfile
#      run: docker run --rm -i hadolint/hadolint < ./base-image/Dockerfile

    - name: Build and Push Base Image
      working-directory: ./base-image
      run: |
        docker buildx create --use
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --cache-from=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/base-image:cache \
          --cache-to=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/base-image:cache,mode=max \
          -t ${{ secrets.DOCKERHUB_REPO }}/base-image:latest \
          -t ${{ secrets.DOCKERHUB_REPO }}/base-image:v1.0-$(date +%Y%m%d)-${{ github.sha }} \
          -t ${{ secrets.DOCKERHUB_REPO }}/base-image:cache \
          --push .

  # Job 2: Build Python Images
  build-python-images:
    name: Build and Push Python Images
    needs: build-base-image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: [3.11, 3.12]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to DockerHub
      run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

 #   - name: Lint Python Dockerfile
 #     run: docker run --rm -i hadolint/hadolint < ./python-layer/Dockerfile

    - name: Build and Push Python Image
      working-directory: ./python-layer
      run: |
        docker buildx create --use
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --cache-from=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/python-${{ matrix.python_version }}:cache \
          --cache-to=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/python-${{ matrix.python_version }}:cache,mode=max \
          --build-arg BASE_IMAGE=${{ secrets.DOCKERHUB_REPO }}/base-image:latest \
          --build-arg PYTHON_VERSION=${{ matrix.python_version }} \
          -t ${{ secrets.DOCKERHUB_REPO }}/python-${{ matrix.python_version }}:latest \
          -t ${{ secrets.DOCKERHUB_REPO }}/python-${{ matrix.python_version }}:v${{ matrix.python_version }}-$(date +%Y%m%d)-${{ github.sha }} \
          -t ${{ secrets.DOCKERHUB_REPO }}/python-${{ matrix.python_version }}:cache \
          --push .

    - name: Test Python Image
      working-directory: ./python-layer
      run: |
        docker run --rm ${{ secrets.DOCKERHUB_REPO }}/python-${{ matrix.python_version }}:latest \
        python${{ matrix.python_version }} --version && pip --version

    - name: Notify Slack
      if: always() # Ensures the Slack notification always runs
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{
          "text": "Python build completed for version: ${{ matrix.python_version }}",
          "attachments": [
            {
              "title": "Build status",
              "text": "Build for Python ${{ matrix.python_version }} has **${{ job.status }}** status.",
              "color": "${{ job.status == 'success' && '#36a64f' || '#ff0000' }}"
            },
            {
              "title": "Workflow Details",
              "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View details>"
            }
          ]
        }' \
        ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job 3: Build Java Images
  build-java-images:
    name: Build and Push Java Images
    needs: build-base-image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java_version: [11, 17]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to DockerHub
      run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

#    - name: Lint Java Dockerfile
#      run: docker run --rm -i hadolint/hadolint < ./java-layer/Dockerfile

    - name: Build and Push Java Image
      working-directory: ./java-layer
      run: |
        docker buildx create --use
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --cache-from=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/java-${{ matrix.java_version }}:cache \
          --cache-to=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/java-${{ matrix.java_version }}:cache,mode=max \
          --build-arg BASE_IMAGE=${{ secrets.DOCKERHUB_REPO }}/base-image:latest \
          --build-arg JAVA_VERSION=${{ matrix.java_version }} \
          -t ${{ secrets.DOCKERHUB_REPO }}/java-${{ matrix.java_version }}:latest \
          -t ${{ secrets.DOCKERHUB_REPO }}/java-${{ matrix.java_version }}:v${{ matrix.java_version }}-$(date +%Y%m%d)-${{ github.sha }} \
          -t ${{ secrets.DOCKERHUB_REPO }}/java-${{ matrix.java_version }}:cache \
          --push .



    - name: Notify Slack
      if: always() # Ensures the Slack notification always runs
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{
          "text": "Java build completed for version: ${{ matrix.java_version }}",
          "attachments": [
            {
              "title": "Build status",
              "text": "Build for Java ${{ matrix.java_version }} has **${{ job.status }}** status.",
              "color": "${{ job.status == 'success' && '#36a64f' || '#ff0000' }}"
            },
            {
              "title": "Workflow Details",
              "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View details>"
            }
          ]
        }' \
        ${{ secrets.SLACK_WEBHOOK_URL }}
#    - name: Test Java Image
#      working-directory: ./java-layer
#      run: |
#        docker run --rm ${{ secrets.DOCKERHUB_REPO }}/java-${{ matrix.java_version }}:latest \
#        java -version

  # Job 4: Generate Build Report
  generate-report:
    name: Generate and Upload Build Report
    needs: [build-python-images, build-java-images]
    runs-on: ubuntu-latest
    steps:
    - name: Generate Report
      run: |
        echo "### Build Report" > build-report.md
        echo "- Base Image: ✅" >> build-report.md
        echo "- Python 3.11: ✅" >> build-report.md
        echo "- Python 3.12: ✅" >> build-report.md
        echo "- Java 11: ✅" >> build-report.md
        echo "- Java 17: ✅" >> build-report.md

    - name: Upload Build Report
      uses: actions/upload-artifact@v3
      with:
        name: build-report
        path: build-report.md
