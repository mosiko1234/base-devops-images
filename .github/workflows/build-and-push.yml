name: Build and Push Docker Images

on:
  push:
    branches:
      - config-dev

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Job 1: Build Base Image
  build-base-image:
    name: Build and Push Base Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and Push Base Image
        working-directory: ./base-image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/base-image:cache \
            --cache-to=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/base-image:cache,mode=max \
            -t ${{ secrets.DOCKERHUB_REPO }}/base-image:latest \
            -t ${{ secrets.DOCKERHUB_REPO }}/base-image:v1.0-$(date +%Y%m%d)-${{ github.sha }} \
            -t ${{ secrets.DOCKERHUB_REPO }}/base-image:cache \
            --push .

  # Job 2: Generate Language Matrix
  generate-matrix:
    name: Generate Language Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Validate Config File
        run: |
          if [ ! -f "config.yml" ]; then
            echo "Error: config.yml not found!"
            exit 1
          fi
          yq '.languages' config.yml || { echo "Invalid config.yml format"; exit 1; }

      - name: Parse Config File
        id: create-matrix
        run: |
          MATRIX=$(yq -o=json '.languages | to_entries | map({"language": .key, "version": .value.versions[]})' config.yml)
          echo "Generated Matrix: $MATRIX"
          if [ -z "$MATRIX" ] || [ "$MATRIX" == "[]" ]; then
            echo "Error: Generated matrix is empty or invalid."
            exit 1
          fi
          MATRIX_COMPACT=$(echo $MATRIX | jq -c '.')
          echo "::set-output name=matrix::$MATRIX_COMPACT"

      - name: Save Matrix to File
        run: |
          echo '${{ steps.create-matrix.outputs.matrix }}' > matrix.json

      - name: Upload Matrix as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: matrix
          path: matrix.json

  # Job 3: Build Language Images
  build-language-images:
    name: Build Language Images
    needs: [build-base-image, generate-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix || '[]') }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Check Dockerfile Existence
        run: |
          if [ ! -f "./${{ matrix.language }}-layer/Dockerfile.${{ matrix.language }}" ]; then
            echo "Error: Dockerfile not found at ./${{ matrix.language }}-layer/Dockerfile.${{ matrix.language }}"
            exit 1
          fi

      - name: List Files for Debugging
        run: |
          echo "Listing files in ./${{ matrix.language }}-layer:"
          ls -la ./${{ matrix.language }}-layer

      - name: Lint Dockerfile with Hadolint
        run: |
          docker pull hadolint/hadolint:latest
          docker run --rm -i hadolint/hadolint < ./${{ matrix.language }}-layer/Dockerfile.${{ matrix.language }} || echo "Lint issues found for Dockerfile.${{ matrix.language }}"

      - name: Build Dynamic Language Image
        working-directory: ./${{ matrix.language }}-layer
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:cache \
            --cache-to=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:cache,mode=max \
            --build-arg BASE_IMAGE=${{ secrets.DOCKERHUB_REPO }}/base-image:latest \
            --build-arg JAVA_VERSION=${{ matrix.version }} \
            --build-arg PYTHON_VERSION=${{ matrix.version }} \
            -t ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:latest \
            -t ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:v${{ matrix.version }}-$(date +%Y%m%d)-${{ github.sha }} \
            -t ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:cache \
            -f Dockerfile.${{ matrix.language }} \
            --push .

      - name: Debug Build Logs
        run: |
          echo "Language: ${{ matrix.language }}"
          echo "Version: ${{ matrix.version }}"

  # Job 4: Test and Scan Language Images
  test-language-images:
    name: Test Language Images
    needs: [build-language-images]
    runs-on: ubuntu-latest
    steps:
      - name: Download Matrix Artifact
        uses: actions/download-artifact@v3
        with:
          name: matrix

      - name: Load Matrix from File
        run: |
          MATRIX=$(cat matrix.json)
          echo "Loaded Matrix: $MATRIX"
          echo "$MATRIX" > loaded-matrix.json

      - name: Security Scan with Trivy
        run: |
          echo "Scanning Image: ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:latest"
          if ! docker inspect ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:latest > /dev/null 2>&1; then
            echo "Image not found: ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:latest. Skipping scan."
            exit 0
          fi
          docker pull aquasec/trivy:latest
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --exit-code 0 --severity HIGH,CRITICAL ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:latest
  
          - name: Prepare Slack Notification Data
          id: slack-data
          run: |
            if [[ "${{ job.status }}" == "success" ]]; then
              COLOR="good"
              STATUS_TEXT=":white_check_mark: Build and Tests Completed Successfully"
            else
              COLOR="danger"
              STATUS_TEXT=":x: Build or Tests Failed"
            fi
  
            BUILD_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            DURATION=$(( $(date +%s) - $(date -d "${{ github.event.pull_request.created_at }}" +%s) ))
            echo "::set-output name=color::$COLOR"
            echo "::set-output name=status_text::$STATUS_TEXT"
            echo "::set-output name=build_url::$BUILD_URL"
            echo "::set-output name=duration::$DURATION"
  
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "${{ steps.slack-data.outputs.status_text }}",
              "attachments": [
                {
                  "color": "${{ steps.slack-data.outputs.color }}",
                  "title": "Pipeline Summary",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Build Link",
                      "value": "<${{ steps.slack-data.outputs.build_url }}|View Build Details>",
                      "short": false
                    },
                    {
                      "title": "Build Status",
                      "value": "${{ job.status }}",
                      "short": true
                    },
                    {
                      "title": "Pipeline Duration",
                      "value": "${{ steps.slack-data.outputs.duration }} seconds",
                      "short": true
                    }
                  ],
                  "text": "Pipeline completed for the following images:\n${{ matrix.language }}:${{ matrix.version }}",
                  "footer": "GitHub Actions",
                  "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                  "ts": $(date +%s)
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  