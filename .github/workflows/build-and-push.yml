name: Build and Push Docker Images

on:
  push:
    branches:
      - config-dev

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Job 1: Build Base Image
  build-base-image:
    name: Build and Push Base Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and Push Base Image
        working-directory: ./base-image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/base-image:cache \
            --cache-to=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/base-image:cache,mode=max \
            -t ${{ secrets.DOCKERHUB_REPO }}/base-image:latest \
            -t ${{ secrets.DOCKERHUB_REPO }}/base-image:v1.0-$(date +%Y%m%d)-${{ github.sha }} \
            -t ${{ secrets.DOCKERHUB_REPO }}/base-image:cache \
            --push .

  generate-matrix:
    name: Generate Language Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
    
      - name: Print Config File
        run: cat config.yml
    
      - name: Validate Config File
        run: |
          if [ ! -f "config.yml" ]; then
            echo "Error: config.yml not found!"
            exit 1
          fi
          yq '.languages' config.yml || { echo "Invalid config.yml format"; exit 1; }
    
      - name: Debug YQ Output
        run: |
          yq -o=json '.languages | to_entries | map({"language": .key, "version": .value.versions[]})' config.yml
    
      - name: Parse Config File
        id: create-matrix
        run: |
          MATRIX=$(yq -o=json '.languages | to_entries | map({"language": .key, "version": .value.versions[]})' config.yml)
          echo "Generated Matrix: $MATRIX"
          if [ -z "$MATRIX" ] || [ "$MATRIX" == "[]" ]; then
            echo "Error: Generated matrix is empty or invalid."
            exit 1
          fi
          echo "::set-output name=matrix::$MATRIX"
    
      - name: Debug Generated Matrix
        run: |
          echo "Matrix JSON:"
          echo "${{ steps.create-matrix.outputs.matrix }}"

  # Job 3: Build Language Images
  build-language-images:
    name: Build Language Images
    needs: [build-base-image, generate-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix || '[]') }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Language Image
        working-directory: ./${{ matrix.language }}-layer
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:cache \
            --cache-to=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:cache,mode=max \
            --build-arg BASE_IMAGE=${{ secrets.DOCKERHUB_REPO }}/base-image:latest \
            --build-arg VERSION=${{ matrix.version }} \
            -t ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:latest \
            -t ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:v${{ matrix.version }}-$(date +%Y%m%d)-${{ github.sha }} \
            -t ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:cache \
            --push .

      - name: Debug Build Logs
        run: |
          echo "Language: ${{ matrix.language }}"
          echo "Version: ${{ matrix.version }}"

  # Job 4: Test Language Images
  test-language-images:
    name: Test Language Images
    needs: build-language-images
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix || '[]') }}
    steps:
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Test Language Image
        run: |
          docker run --rm ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:latest \
          ${{ matrix.language }} --version || echo "Test failed for ${{ matrix.language }}-${{ matrix.version }}"
