name: Build and Push Docker Images

on:
  push:
    branches:
      - config-dev

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Job 1: Build Base Image
  build-base-image:
    name: Build and Push Base Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and Push Base Image
        working-directory: ./base-image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/base-image:cache \
            --cache-to=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/base-image:cache,mode=max \
            -t ${{ secrets.DOCKERHUB_REPO }}/base-image:latest \
            -t ${{ secrets.DOCKERHUB_REPO }}/base-image:v1.0-$(date +%Y%m%d)-${{ github.sha }} \
            --push .

  # Job 2: Generate Language Matrix
  generate-matrix:
    name: Generate Language Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Validate Config File
        run: |
          if [ ! -f "config.yml" ]; then
            echo "Error: config.yml not found!"
            exit 1
          fi
          yq '.languages' config.yml || { echo "Invalid config.yml format"; exit 1; }

      - name: Parse Config File
        id: create-matrix
        run: |
          MATRIX=$(yq -o=json '.languages | to_entries | map({"language": .key, "version": .value.versions[], "build_args": .value.build_args})' config.yml)
          echo "Generated Matrix: $MATRIX"
          if [ -z "$MATRIX" ] || [ "$MATRIX" == "[]" ]; then
            echo "Error: Generated matrix is empty or invalid."
            exit 1
          fi
          MATRIX_COMPACT=$(echo $MATRIX | jq -c '.')
          echo "matrix=$MATRIX_COMPACT" >> $GITHUB_OUTPUT

      - name: Save Matrix to File
        run: |
          echo '${{ steps.create-matrix.outputs.matrix }}' > matrix.json

      - name: Upload Matrix as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: matrix
          path: matrix.json

  # Job 3: Build Language Images
  build-language-images:
    name: Build Language Images
    needs: [build-base-image, generate-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix || '[]') }}
      max-parallel: 4
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Check Dockerfile Existence
        run: |
          if [ ! -f "./${{ matrix.language }}-layer/Dockerfile.${{ matrix.language }}" ]; then
            echo "Error: Dockerfile not found at ./${{ matrix.language }}-layer/Dockerfile.${{ matrix.language }}"
            exit 1
          fi

      - name: Lint Dockerfile with Hadolint
        run: |
          mkdir -p ./lint-logs
          docker pull hadolint/hadolint:latest
          docker run --rm -i hadolint/hadolint < ./${{ matrix.language }}-layer/Dockerfile.${{ matrix.language }} || echo "Lint issues found for Dockerfile.${{ matrix.language }}" >> ./lint-logs/${{ matrix.language }}.log

      - name: Build Dynamic Language Image
        working-directory: ./${{ matrix.language }}-layer
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:cache \
            --cache-to=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:cache,mode=max \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            --build-arg BASE_IMAGE=${{ secrets.DOCKERHUB_REPO }}/base-image:latest \
            --build-arg JAVA_VERSION=${{ matrix.version }} \
            --build-arg PYTHON_VERSION=${{ matrix.version }} \
            -t ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:latest \
            -t ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:v${{ matrix.version }}-$(date +%Y%m%d)-${{ github.sha }} \
            -t ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:cache \
            -f Dockerfile.${{ matrix.language }} \
            --push .

      - name: Upload Lint Logs
        uses: actions/upload-artifact@v4
        with:
          name: lint-logs-${{ matrix.language }}-${{ matrix.version }}
          path: ./lint-logs/
          if-no-files-found: warn

  # Job 4: Security Scan and Notify
  test-and-notify:
    name: Test and Notify
    needs: [build-language-images]
    runs-on: ubuntu-latest
    steps:
      - name: Download Matrix Artifact
        uses: actions/download-artifact@v4
        with:
          name: matrix

      - name: Verify Downloaded Matrix File
        run: |
          if [ ! -f matrix.json ]; then
            echo "Error: matrix.json not found after download!"
            exit 1
          fi
          cat matrix.json

      - name: Collect Built Images
        id: collect-images
        run: |
          MATRIX=$(cat matrix.json)
          IMAGES=""
          echo $MATRIX | jq -c '.[]' | while read ITEM; do
            LANGUAGE=$(echo $ITEM | jq -r '.language')
            VERSION=$(echo $ITEM | jq -r '.version')
            IMAGE_NAME="${{ secrets.DOCKERHUB_REPO }}/${LANGUAGE}-${VERSION}:latest"
            DOCKER_HUB_URL="https://hub.docker.com/r/${{ secrets.DOCKERHUB_REPO }}/${LANGUAGE}-${VERSION}"
            IMAGES="$IMAGES\nâ€¢ <${DOCKER_HUB_URL}|${IMAGE_NAME}>"
          done
          echo "images=$IMAGES" >> $GITHUB_OUTPUT

      - name: Prepare Slack Notification Data
        id: slack-data
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            COLOR="good"
            STATUS_TEXT=":white_check_mark: Build and Tests Completed Successfully"
          else
            COLOR="danger"
            STATUS_TEXT=":x: Build or Tests Failed"
          fi
          BUILD_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "color=$COLOR" >> $GITHUB_OUTPUT
          echo "status_text=$STATUS_TEXT" >> $GITHUB_OUTPUT
          echo "build_url=$BUILD_URL" >> $GITHUB_OUTPUT

      - name: Generate Slack Payload
        run: |
          IMAGES_LIST="${{ steps.collect-images.outputs.images }}"
          TRIVY_REPORT_COUNT=$(ls ./trivy-scan-report/*.log 2>/dev/null | wc -l || echo 0)
      
          cat <<EOF > slack-payload.json
          {
            "text": ":information_source: *Build and Test Results*",
            "attachments": [
              {
                "color": "${{ steps.slack-data.outputs.color }}",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Build Status",
                    "value": "${{ steps.slack-data.outputs.status_text }}",
                    "short": true
                  },
                  {
                    "title": "Images Built",
                    "value": "$IMAGES_LIST",
                    "short": false
                  },
                  {
                    "title": "Total Trivy Reports",
                    "value": "$TRIVY_REPORT_COUNT reports generated",
                    "short": true
                  },
                  {
                    "title": "Workflow Run",
                    "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                    "short": false
                  }
                ],
                "footer": "Workflow Run ID: ${{ github.run_id }}",
                "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "ts": $(date +%s)
              }
            ]
          }
          EOF

      - name: Validate Slack Payload
        run: |
          jq . slack-payload.json || { echo "Invalid JSON payload"; exit 1; }

      - name: Send Slack Notification with cURL
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data @slack-payload.json \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Cleanup Temporary Files
        run: |
          rm -f slack-payload.json
