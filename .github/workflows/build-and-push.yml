name: Build and Push Docker Images

on:
  push:
    branches:
      - config-dev

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Job 1: Build Base Image
  build-base-image:
    name: Build and Push Base Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and Push Base Image
        working-directory: ./base-image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/base-image:cache \
            --cache-to=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/base-image:cache,mode=max \
            -t ${{ secrets.DOCKERHUB_REPO }}/base-image:latest \
            -t ${{ secrets.DOCKERHUB_REPO }}/base-image:v1.0-$(date +%Y%m%d)-${{ github.sha }} \
            -t ${{ secrets.DOCKERHUB_REPO }}/base-image:cache \
            --push .

  # Job 2: Generate Language Matrix
  generate-matrix:
    name: Generate Language Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Parse Config File
        id: create-matrix
        run: |
          MATRIX=$(yq eval -o=json '.languages | to_entries | map({language: .key, versions: .value.versions[]})' config.yml)
          echo "Generated Matrix: $MATRIX"
          echo "::set-output name=matrix::$MATRIX"

  # Job 3: Build Language Images
  build-language-images:
    name: Build Language Images
    needs: [build-base-image, generate-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Language Image
        working-directory: ./${{ matrix.language }}-layer
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:cache \
            --cache-to=type=registry,ref=${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:cache,mode=max \
            --build-arg BASE_IMAGE=${{ secrets.DOCKERHUB_REPO }}/base-image:latest \
            --build-arg VERSION=${{ matrix.version }} \
            -t ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:latest \
            -t ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:v${{ matrix.version }}-$(date +%Y%m%d)-${{ github.sha }} \
            -t ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:cache \
            --push .

  # Job 4: Test Language Images
  test-language-images:
    name: Test Language Images
    needs: build-language-images
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Test Language Image
        run: |
          docker run --rm ${{ secrets.DOCKERHUB_REPO }}/${{ matrix.language }}-${{ matrix.version }}:latest \
          ${{ matrix.language }} --version || echo "Test failed for ${{ matrix.language }}-${{ matrix.version }}"

  # Job 5: Generate Build Report and Notify
  generate-report:
    name: Generate and Notify Build Report
    needs: test-language-images
    runs-on: ubuntu-latest
    steps:
      - name: Generate Build Report
        run: |
          echo "### Build Report" > build-report.md
          echo "- Base Image: ✅" >> build-report.md
          echo "- Language Images:" >> build-report.md
          echo "${{ fromJson(needs.generate-matrix.outputs.matrix) | map(item => '- ' + item.language + ' ' + item.version + ': ✅').join('\n') }}" >> build-report.md

      - name: Upload Build Report
        uses: actions/upload-artifact@v3
        with:
          name: build-report
          path: build-report.md

      - name: Notify Slack with Summary
        run: |
          REPORT=$(cat build-report.md | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "Build Summary Report",
            "attachments": [
              {
                "title": "Build Status",
                "text": "'"$REPORT"'",
                "color": "#36a64f"
              },
              {
                "title": "View Details",
                "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click here>"
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
